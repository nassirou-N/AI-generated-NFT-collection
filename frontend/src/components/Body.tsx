import React, { useEffect, useMemo, useState } from "react";
import {
	Box,
	CircularProgress,
	ImageList,
	Typography,
	useTheme,
	ImageListItem,
	Grid,
	SelectProps
} from "@mui/material";
import { useAccount, useConnect, useSignMessage } from 'wagmi'
import { CheckCircleOutlined, Image } from "@mui/icons-material";
import { useRouter } from 'next/router'
import axios from 'axios'
import { StartonButton } from './common/StartonButton'
import { FAQ } from "./FAQ";
import { StartonSvg } from "./StartonSvg";
import {
	StartonFormikSelect, StartonFormikTextField,
	StartonNumberField,
	StartonSelectOptionProps,
	StartonTextField
} from "@starton/ui-nextjs";
import { Field, Form, Formik } from "formik";

/*
|--------------------------------------------------------------------------
| Contracts
|--------------------------------------------------------------------------
*/
export interface BodyProps {}

/*
|--------------------------------------------------------------------------
| Component
|--------------------------------------------------------------------------
*/
export const Body: React.FC<BodyProps> = () => {

	const theme = useTheme()
	const [pictures, setPictures] = useState([])
	// const [tx, setTx] = useState([])
	const [isGenerationLoading, setGenerationLoading] = useState(false);
	const [isDeploymentLoading, setDeploymentLoading] = useState(false);
	const [isDeployed, setDeployment] = useState(false);


	// const selectOptions = React.useMemo<Array<StartonSelectOptionProps>>(() => {
	// 	return [
	// 		{
	// 			value: 0,
	// 			children: 'Contract metadata',
	// 			onClick: () => {
	// 				setTemplateIndex(0)
	// 				setJson({ content: JSON.stringify(JSON.parse(jsonTemplates[0]), null, 2), isValid: true })
	// 			},
	// 		},
	// 		{
	// 			value: 1,
	// 			children: 'NFT metadata',
	// 			onClick: () => {
	// 				setTemplateIndex(1)
	//
	// 				setJson({ content: JSON.stringify(JSON.parse(jsonTemplates[1]), null, 2), isValid: true })
	// 			},
	// 		},
	// 	]
	// }, [])

	const generatePictures = async () => {
		setGenerationLoading(true);

		await fetch('http://localhost:8000/generate', {
			method: 'POST',
			headers: { 'Content-Type': 'application/json' },
			body: null
		}).then(response => {
			setGenerationLoading(false)
			return response.json()
		}).then(data => {
			setPictures(data.pictures)
		}).catch((e) => { console.error(e)})
	}

	const deployCollection = async () => {
		setDeploymentLoading(true)

		const body = JSON.stringify({
			pictures: pictures ? pictures : [],
			ownerWallet: '0xA76ed24122193CF53f81F6dBEbE2a1DfF8f9e901',
			smartContractName: 'Front AI deployed collection',
			smartContractSymbol: 'FAP'
		})

		await fetch('http://localhost:8000/deploy', {
			method: 'POST',
			headers: { 'Content-type': 'application/json; charset=UTF-8' },
			mode: 'cors',
			body: body
		}).then(response => {
			setDeploymentLoading(false)
			setDeployment(true)
			return response.json()
		}).then(data => {
			console.log('deployCollection --- ', data)
			// setTx(data)
		}).catch((e) => { console.error(e)})
	}

	const handleCidSubmit = async () => {
		console.log('CLICK')
	}


	const defaultValues = {  name: '' }

	// Render
	//--------------------------------------------------------------------------
	return (
		<Box maxWidth={1192} display="flex" flexDirection="column" gap={10} marginX="auto" marginTop={10} padding={3}>
			<Typography variant="h2">
				Create your NFT collection{' '}
				<Typography color="secondary.main" variant="h2" component="span">
					generated by AI
				</Typography>
			</Typography>
			<Box display="flex" flexDirection="column" gap={2}>
				<Typography variant="h3" textTransform="uppercase">
					Collection details
				</Typography>
				<Typography color="text.secondary" variant="body1">
					We know you can't wait to generate your NFT collection but before that, it is important to add some details so that it is unique.
				</Typography>
			</Box>

			<Formik initialValues={defaultValues} onSubmit={handleCidSubmit}>
				<Form style={{ display: "flex", flexDirection: "row", alignItems: 'flex-end', flexWrap: 'wrap', justifyContent: 'space-between' }}>
					<Field
						component={StartonFormikTextField}
						name={'Wallet address'}
						label={'Wallet address'}
						placeholder={'0x...'}
					/>
					<Field
						component={StartonFormikTextField}
						// select={true}
						name={'Blockchain / Network'}
						label={'Blockchain / Network'}
						placeholder={'polygon-mumbai'}
					/>
				</Form>
			</Formik>

			<Formik initialValues={defaultValues} onSubmit={handleCidSubmit}>
				<Form style={{ display: "flex", flexDirection: "row", alignItems: 'flex-end', flexWrap: 'wrap', justifyContent: 'space-between' }}>
					<Field
						component={StartonFormikTextField}
						name={'Collection name'}
						label={'Collection name'}
						placeholder={'Majestic Collection'}
					/>
					<Field
						component={StartonFormikTextField}
						name={'Number of pictures'}
						label={'Number of pictures'}
						placeholder={'5'}
						type={'number'}
					/>
				</Form>
			</Formik>

			<Formik initialValues={defaultValues} onSubmit={handleCidSubmit}>
				<Form style={{ display: "flex", flexDirection: "row", alignItems: 'flex-end', flexWrap: 'wrap', justifyContent: 'space-between' }}>
					<Field
						component={StartonFormikTextField}
						name={'Prompt'}
						label={'Prompt'}
						placeholder={'Majestic Collection'}
					/>
					<StartonButton
						size="small"
						variant="contained"
						startIcon={
							isGenerationLoading ? (
								<CircularProgress
									sx={{
										width: 3,
										height: 'unset !important',
										color: `${theme.palette.secondary.dark} !important`,
									}}
								/>
							) : null
						}
						onClick={generatePictures}
					>
						{isGenerationLoading
							? 'Generating...'
							: 'Generate'
						}
					</StartonButton>
				</Form>
			</Formik>

			<Grid
				container
				direction="row"
				justifyContent="space-around"
				alignItems="flex-start"
				gap={5}
			>
				{pictures.map((picture) => (
						<Grid item key={picture}>
							<img
								src={`${picture}`}
								srcSet={`${picture}`}
								style={{borderRadius: '1.5%'}}
								loading="lazy"
								alt={`${picture}`}
							/>
						</Grid>
					))}
			</Grid>

			<Box maxWidth={1192} display="flex" flexDirection="row" gap={10} margin="auto" alignItems={'center'} padding={3} flexWrap={'wrap'}>
				<StartonButton
					size="large"
					variant="contained"
					color="secondary"
					startIcon={
						isDeploymentLoading ? (
							<CircularProgress
								sx={{
									width: 40,
									height: 'unset !important',
									color: `${theme.palette.secondary.dark} !important`,
								}}
							/>
						) : null
					}
					onClick={deployCollection}
				>
					{isDeploymentLoading
						? 'Deploying...'
						: isDeployed ? 'Deployed!' : 'Deploy'
					}
				</StartonButton>
			</Box>

			<FAQ />
		</Box>
	)
}
