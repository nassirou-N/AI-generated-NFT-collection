import React, { useState } from "react";
import {
	Box,
	CircularProgress,
	Typography,
	useTheme,
	Grid, ImageList
} from "@mui/material";
import { StartonButton } from './common/StartonButton'
import { FAQ } from "./FAQ";
import {
	StartonFormikTextField,
} from "@starton/ui-nextjs";
import { Field, Form, Formik } from "formik";
import { toInteger } from "lodash";
import { ElementSvg } from "./common/svg/ElementSvg";
import { OpenseaSvg } from "./common/svg/OpenseaSvg";

/*
|--------------------------------------------------------------------------
| Contracts
|--------------------------------------------------------------------------
*/
export interface BodyProps {}

/*
|--------------------------------------------------------------------------
| Component
|--------------------------------------------------------------------------
*/
export const Body: React.FC<BodyProps> = () => {

	const theme = useTheme()
	const [pictures, setPictures] = useState([])
	// const [tx, setTx] = useState([])
	const [isGenerationLoading, setGenerationLoading] = useState(false);
	const [isGenerated, setGeneration] = useState(false);
	const [isDeploymentLoading, setDeploymentLoading] = useState(false);
	const [isDeployed, setDeployment] = useState(false);
	const [body, setBody] = useState({})

	interface FormikInitialValues {
		wallet: string | null,
		network: string | null,
		collectionName: string | null,
		nbPictures: string | null,
		prompt: string | null,
	}

	const initialValues: FormikInitialValues = {
		wallet: '',
		network: '',
		collectionName: '',
		nbPictures: '',
		prompt: ''
	}


	// const selectOptions = React.useMemo<Array<StartonSelectOptionProps>>(() => {
	// 	return [
	// 		{
	// 			value: 0,
	// 			children: 'Contract metadata',
	// 			onClick: () => {
	// 				setTemplateIndex(0)
	// 				setJson({ content: JSON.stringify(JSON.parse(jsonTemplates[0]), null, 2), isValid: true })
	// 			},
	// 		},
	// 		{
	// 			value: 1,
	// 			children: 'NFT metadata',
	// 			onClick: () => {
	// 				setTemplateIndex(1)
	//
	// 				setJson({ content: JSON.stringify(JSON.parse(jsonTemplates[1]), null, 2), isValid: true })
	// 			},
	// 		},
	// 	]
	// }, [])

	const generatePictures = async (body: any) => {
		setGenerationLoading(true);

		await fetch('http://localhost:8000/generate', {
			method: 'POST',
			headers: { 'Content-type': 'application/json; charset=UTF-8' },
			mode: 'cors',
			body: JSON.stringify(body)
		}).then(response => {
			setGenerationLoading(false)
			setGeneration(true)
			setDeployment(false)
			return response.json()
		}).then(data => {
			setPictures(data.pictures)
		}).catch((e) => { console.error(e)})
	}

	const deployCollection = async () => {
		setDeploymentLoading(true)

		const body = JSON.stringify({
			pictures: pictures ? pictures : [],
			ownerWallet: '0xA76ed24122193CF53f81F6dBEbE2a1DfF8f9e901',
			smartContractName: 'Front AI deployed collection',
			smartContractSymbol: 'FAP'
		})

		await fetch('http://localhost:8000/deploy', {
			method: 'POST',
			headers: { 'Content-type': 'application/json; charset=UTF-8' },
			mode: 'cors',
			body: body
		}).then(response => {
			setDeploymentLoading(false)
			setDeployment(true)
			return response.json()
		}).then(data => {
			console.log('deployCollection --- ', data)
			// setTx(data)
		}).catch((e) => { console.error(e)})
	}

	const handleCidSubmit = async (body: FormikInitialValues) => {
		console.log('BODY FORM')
		setBody(body)
		console.log('BODY - ', body)

		await generatePictures(body)
	}

	// prompt: 'random abstract majestic complex picture 8k'

	// Render
	//--------------------------------------------------------------------------
	return (
		<Box maxWidth={1192} display="flex" flexDirection="column" gap={10} marginX="auto" marginTop={10} padding={5}>
			<Typography variant="h2" fontWeight={600}>
				Create your NFT collection{' '}
				<Typography color="secondary.main" variant="h2" component="span">
					generated by AI
				</Typography>
			</Typography>

			<Box display="flex" flexDirection="column" gap={2}>
				<Typography variant="h3" textTransform="uppercase">
					Collection details
				</Typography>
				<Typography color="text.secondary" variant="body1">
					We know you can't wait to generate your NFT collection but before that, it is important to add some details so that it is unique.
				</Typography>
			</Box>

			<Formik
				initialValues={initialValues}
				onSubmit={handleCidSubmit}>
				<Form>
					<Box style={{ display: "flex", flexDirection: "column", flexWrap: 'wrap', justifyContent: 'space-between' }} gap={6}>

						<Box style={{ display: "flex", flexDirection: "row", alignItems: 'flex-end', justifyContent: 'space-between', gap: 6 }}>
							<Field
								sx={{width: '73%'}}
								component={StartonFormikTextField}
								name={'wallet'}
								label={'Wallet address'}
								placeholder={'0x...'}
								disabled={isGenerationLoading || isDeploymentLoading}
							/>
							<Field
								sx={{width: '25%'}}
								component={StartonFormikTextField}
								// select={true}
								name={'network'}
								label={'Blockchain / Network'}
								placeholder={'polygon-mumbai'}
								disabled={isGenerationLoading || isDeploymentLoading}
							/>
						</Box>
						<Box style={{ display: "flex", flexDirection: "row", alignItems: 'flex-end', justifyContent: 'space-between', gap: 6 }}>
							<Field
								sx={{width: '73%'}}
								component={StartonFormikTextField}
								name={'collectionName'}
								label={'Collection name'}
								placeholder={'Majestic Collection'}
								disabled={isGenerationLoading || isDeploymentLoading}
							/>
							<Field
								sx={{width: '25%'}}
								component={StartonFormikTextField}
								name={'nbPictures'}
								label={'Number of pictures'}
								placeholder={'5'}
								type={'number'}
								disabled={isGenerationLoading || isDeploymentLoading}
							/>
						</Box>
						<Box style={{ display: "flex", flexDirection: "row", alignItems: 'flex-end', justifyContent: 'space-between', gap: 6 }}>
							<Field
								sx={{width: isGenerationLoading ? '73%' : '83%'}}
								component={StartonFormikTextField}
								name={'prompt'}
								label={'Prompt'}
								placeholder={'random abstract majestic complex picture 8k'}
								disabled={isGenerationLoading || isDeploymentLoading}
							/>
							<StartonButton
								sx={{width: isGenerationLoading ? '25%' : '15%'}}
								size="small"
								variant="contained"
								disabled={isGenerationLoading || isDeploymentLoading}
								type='submit'
								startIcon={
									isGenerationLoading ? (
										<CircularProgress
											sx={{
												width: 3,
												height: 'unset !important',
												color: `${theme.palette.secondary.dark} !important`,
											}}
										/>
									) : null
								}
							>
								{isGenerationLoading
									? 'Generating...'
									: 'Generate'
								}
							</StartonButton>
						</Box>
					</Box>
				</Form>
			</Formik>

			<Grid
				container
				display={'flex'}
				flexDirection="row"
				alignContent={'space-between'}
				maxWidth={'100%'}
				rowSpacing={1}
			>
				{pictures.map((picture) => (
						<Grid item xs={2.3} key={picture} >
							<img
								src={`${picture}`}
								srcSet={`${picture}`}
								style={{borderRadius: '1.5%'}}
								width={'90%'}
								loading="lazy"
								alt={`${picture}`}
							/>
						</Grid>
					))}
			</Grid>

			<Box display="flex" flexDirection="row" gap={10} margin="auto" alignItems={'center'} padding={3} flexWrap={'wrap'}>
				{isGenerated
					? isDeployed
						? <Box display="flex" flexDirection="row" gap={3} margin="auto" alignItems={'center'} padding={3}>
							<StartonButton
								size="large"
								variant="contained"
								color="primary"
								disabled={isGenerationLoading}
								startIcon={
									<OpenseaSvg />
								}
								// onClick={}
							>
								Opensea
							</StartonButton>
							<StartonButton
								size="large"
								variant="contained"
								color="primary"
								disabled={isGenerationLoading}
								startIcon={
									<ElementSvg />
								}
								// onClick={deployCollection}
							>
								Element
							</StartonButton>

						</Box>
						: <StartonButton
							size="large"
							variant="contained"
							color="secondary"
							disabled={isDeploymentLoading}
							startIcon={
								isDeploymentLoading ? (
									<CircularProgress
										sx={{
											width: 40,
											height: 'unset !important',
											color: `${theme.palette.secondary.dark} !important`,
										}}
									/>
								) : null
							}
							onClick={deployCollection}
						>
							{isDeploymentLoading
								? 'Deploying...'
								: 'Deploy'
							}
						</StartonButton>
					: null
				}
			</Box>

			<FAQ />
		</Box>
	)
}
